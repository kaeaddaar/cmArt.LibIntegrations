@page "/shopifypricerules"
@using cmArt.Portal.Data
@using cmArt.Reece.ShopifyConnector
@using cmArt.LibIntegrations.ApiCallerService
@using Newtonsoft.Json.Linq
@using cmArt.LibIntegrations.ClientControllerService
@using cmArt.Portal.Data.ShopifyData

@inject ClientController_Guid<Document_PK,Document> DocumentController


<h3>ShopifyPriceRules</h3>
<button @onclick="LoadPricesList">Load Prices List</button>
<button @onclick="SavePricesToFile">Save Prices To File</button>
Record Count: @records.Count()
<br />
Page Count: @PageCount
<table>
    <tr>
        <td>record.title</td>
        <td>record.value</td>
        <td>record.id</td>
        <td>record.value_type</td>
    </tr>
    @foreach (var record in records)
    {
    <tr>
        <td>@record.title</td>
        <td>@record.value</td>
        <td>@record.id</td>
        <td>@record.value_type</td>
    </tr>
    }
</table>
<input @bind="json_results" />
<h3>Url Commands Used</h3>
@foreach(var url in UrlCommands)
{
    @url <br />
}
@code {
    private List<dynamic> _records;
    private List<string> _UrlCommands;
    private string _json_results;
    public string json_results
    {
        get { return _json_results ?? string.Empty; }
        set { _json_results = value ?? string.Empty; }
    }
    public IEnumerable<dynamic> records 
    { 
        get { return _records ?? new List<dynamic>(); } 
        set { _records = value.ToList() ?? _records ?? new List<dynamic>(); }
    }
    private int PageCount { get; set; }
    public List<string> UrlCommands 
    { 
        get
        {
            return _UrlCommands ?? new List<string>();
        }
        set
        {
            _UrlCommands = value ?? _UrlCommands ?? new List<string>();
        }
    }
    public async void SavePricesToFile()
    {
        string records_Json = Newtonsoft.Json.JsonConvert.SerializeObject(records);
        json_results = records_Json;
        //// -- Getting document
        //strDocument = await Http.GetStringAsync("http://localhost:7071/api/JsonDocument/c1f7d63e-1f1a-42cd-8c00-254f3b77354d");
        //doc = (Document)System.Text.Json.JsonSerializer.Deserialize(strDocument, typeof(Document));
        //quantities_Shopify = (Shopify_Quantities[])System.Text.Json.JsonSerializer.Deserialize(doc.DocumentValue, typeof(Shopify_Quantities[]));
        //// Getting docuemnt --

        //// -- Saving document
        //Context_Documents context = new Context_Documents();
        //Document S5_Product_Document = new Document();
        //S5_Product_Document.Id = new Guid("74e5b8d9-f264-4029-af3a-f2c44c906511");
        //S5_Product_Document.DocumentName = "S5_Product";
        //S5_Product_Document.CustomerId = Guid.Empty;
        //S5_Product_Document.ProjectId = Guid.Empty;
        //S5_Product_Document.DocumentValue = System.Text.Json.JsonSerializer.Serialize(PocoProductsAdapted, typeof(IEnumerable<Shopify_Product>));
        //Document_Repository.AddJsonDocument(context, S5_Product_Document);
        //// Saving document --

        // transform records to shopify_price_rule
        var objRecords = records.Select(x =>
        {
            shopify_price_rule tmp = new shopify_price_rule();
            tmp.id = x.id;
            tmp.title = x.title;
            tmp.value = x.value;
            tmp.value_type = x.value_type;
            return tmp;
        }
        );

        Document doc = new Document();
        doc.id = new Guid("ed5f1fc0-aedb-4c42-8962-25708480457a");
        doc.documentName = "shopify_price_rules";
        doc.customerId = Guid.Empty;
        doc.documentValue = Newtonsoft.Json.JsonConvert.SerializeObject(objRecords);

        DocumentController.Add(doc.id, doc, new Dictionary<string, string>());
    }
    public async void LoadPricesList()
    {
        ApiCallerBase api = new ApiCallerBase();
        ApiCallData data = new ApiCallData();
        ApiConnectorData connData = new ApiConnectorData();
        connData.Url = "https://deltawaterproducts.myshopify.com";
        connData.UserName = "ed84bfc1c2687d7d6f357717fe977dd6";
        connData.Password = "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";

        data.UrlCommand = "/admin/api/2022-01/price_rules.json?limit=250";
        data.Body = string.Empty;

        //string ApiConnectorData_Json = System.Text.Json.JsonSerializer.Serialize(connData, typeof(ApiConnectorData));
        //string ApiCallData_Json = System.Text.Json.JsonSerializer.Serialize(data, typeof(ApiCallData));

        //string results = await ReeceShopifyAzFunc.MakeApiGetCallGeneric(ApiConnectorData_Json, ApiCallData_Json);

        //var tmp = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(results);
        dynamic tmp = await GetPageOfPriceRules(api, connData, data);
        if (tmp == null)
        { Console.WriteLine("tmp which should contain List of Price Rules was null"); }
        if (tmp.price_rules == null)
        { Console.WriteLine("List of Price Rules was null"); }

        records = tmp.price_rules;

        StateHasChanged();
    }
    private async Task<dynamic> GetPageOfPriceRules(ApiCallerBase api, ApiConnectorData connData, ApiCallData data)
    {
        //ApiCallerBase api = new ApiCallerBase();
        //ApiCallData data = new ApiCallData();
        //ApiConnectorData connData = new ApiConnectorData();

        //data.UrlCommand = "/admin/api/2022-01/price_rules.json";
        //data.Body = string.Empty;

        string ApiConnectorData_Json = System.Text.Json.JsonSerializer.Serialize(connData, typeof(ApiConnectorData));
        string ApiCallData_Json = System.Text.Json.JsonSerializer.Serialize(data, typeof(ApiCallData));

        HttpResponseMessage results = await ReeceShopifyAzFunc.MakeApiGetCallGeneric(ApiConnectorData_Json, ApiCallData_Json);
        string strResults = results.Content.ReadAsStringAsync().Result;
        dynamic tmp = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(strResults);
        //string TestSerialize = Newtonsoft.Json.JsonConvert.SerializeObject(tmp);
        records = tmp.price_rules;

        //string strLink = results.Headers.Where(x => x.Key == "Link").Select(x => string.Join(',', x.Value)).FirstOrDefault() ?? string.Empty;
        //int poslt = strLink.IndexOf('<');
        //int posgt = strLink.IndexOf('>');
        //string strNextPageUrl = strLink.Substring(poslt + 1, posgt - poslt - 1);
        //int lenBaseUrl = connData.Url.Length;
        //int lenNextPageUrl = strNextPageUrl.Length;
        //data.UrlCommand = strNextPageUrl.Substring(lenBaseUrl, lenNextPageUrl - lenBaseUrl);

        //List<string> UrlCommandsUsed = new List<string>();
        UrlCommands.Add("Page (" + PageCount + ") UrlCommand: " + data.UrlCommand);
        data = GetNextPage_ApiCallData(results, connData, data);
        UrlCommands.Add("Page (" + PageCount + ") UrlCommand: " + data.UrlCommand);

        PageCount = 1;

        while (data.UrlCommand != string.Empty)
        {
            ApiConnectorData_Json = System.Text.Json.JsonSerializer.Serialize(connData, typeof(ApiConnectorData));
            ApiCallData_Json = System.Text.Json.JsonSerializer.Serialize(data, typeof(ApiCallData));

            results = await ReeceShopifyAzFunc.MakeApiGetCallGeneric(ApiConnectorData_Json, ApiCallData_Json);
            strResults = results.Content.ReadAsStringAsync().Result;
            data = GetNextPage_ApiCallData(results, connData, data);

            dynamic tmpPage = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(strResults);
            foreach(var tmpPageItem in tmpPage.price_rules) { _records.Add(tmpPageItem); }

            UrlCommands.Add("Page (" + PageCount + ") UrlCommand: " + data.UrlCommand);
            PageCount++;
            StateHasChanged();
        }
        return tmp;
    }
    private ApiCallData GetNextPage_ApiCallData(HttpResponseMessage results, ApiConnectorData connData, ApiCallData data)
    {
        string strLink = results.Headers.Where(x => x.Key == "Link").Select(x => string.Join(',', x.Value)).FirstOrDefault() ?? string.Empty;
        int poslt = strLink.IndexOf('<');
        int posgt = strLink.IndexOf('>');
        int lenUrl = posgt - poslt - 1;
        bool LinkMissing = lenUrl <= 0;
        if (LinkMissing) // turns out there is a previous and a next ex: rel="previous"
        { 
            data.UrlCommand = string.Empty;
            return data;
        }
        string strNextPageUrl = strLink.Substring(poslt + 1, posgt - poslt - 1);
        int lenBaseUrl = connData.Url.Length;
        int lenNextPageUrl = strNextPageUrl.Length;
        data.UrlCommand = strNextPageUrl.Substring(lenBaseUrl, lenNextPageUrl - lenBaseUrl);

        return data;
    }
    public async void LoadPricesList2()
    {
        string results = await ReeceShopifyAzFunc.MakeApiGetCall
        (
            "/admin/api/2022-01/price_rules.json"
            , "https://deltawaterproducts.myshopify.com"
            , "ed84bfc1c2687d7d6f357717fe977dd6"
            , "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"
        );

    }
}
