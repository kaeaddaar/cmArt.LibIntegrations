@page "/SinglePart"
@inject HttpClient Http
@using cmArt.LibIntegrations.ReportService
@using cmArt.LibIntegrations.ETLPatternService
@using cmArt.LibIntegrations.VennMapService
@using cmArt.Reece.ShopifyConnector
@using cmArt.Portal.Data
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Text.Json


<PageTitle>Single Part Review</PageTitle>

<h1>Review all data for a single part</h1>

<select id="optS5Products" @bind="invUnique">
@if (products_S5 == null)
{
        <option value="">No Product Found</option>
}
else
{
    <option value="0">Select an Inventory Item</option>
    foreach(var record in products_S5.OrderBy(x => x.PartNumber))
    {
        <option value="@record.InvUnique">@record.PartNumber (@record.Cat)</option>
    }
}
</select>
InvUnique: @invUnique <br />
<button @onclick="OnPartSelected">Does @invUnique need to be Added, Edited, or Deleted?</button> ANS: @PartAction<br />
<button @onclick="() => GetDetailedDifferences()">Get Detailed Differences</button><br />
<input value="@strS5Json" />
<input value="@strShopifyJson" />
<h2>S5 Part Info:</h2>
@if(GetActiveS5Product() == null)
{
<table class="table">
    <thead>
        <td>Fields</td>
        <td>Values</td>
    </thead>
    <tbody>
        <tr>
            <td>InvUnique</td>
            <td>Record Not Found</td>
        </tr>
        <tr>
            <td>Cat</td>
            <td>Record Not Found</td>
        </tr>
        <tr>
            <td>PartNumber</td>
            <td>Record Not Found</td>
        </tr>
        <tr>
            <td>Description</td>
            <td>Record Not Found</td>
        </tr>
        <tr>
            <td>WebCategory</td>
            <td>Record Not Found</td>
        </tr>
        <tr>
            <td>Pricing Info</td>
            <td>Record Not Found</td>
        </tr>
    </tbody>
</table>
}
else
{
<table class="table">
    <thead>
        <td>Fields</td>
        <td>Values</td>
    </thead>
    <tbody>
        <tr>
            <td>InvUnique</td>
            <td>@S5Product.InvUnique</td>
        </tr>
        <tr>
            <td>Cat</td>
            <td>@S5Product.Cat</td>
        </tr>
        <tr>
            <td>PartNumber</td>
            <td>@S5Product.PartNumber</td>
        </tr>
        <tr>
            <td>Description</td>
            <td>@S5Product.Description</td>
        </tr>
        <tr>
            <td>WebCategory</td>
            <td>@S5Product.WebCategory</td>
        </tr>
        <tr>
            @if (GetActiveS5Prices() == null)
            {
                <td>Pricing info</td>
            }
            else
            {
                <td><div title="@S5Prices.Prices.Count() records found" style="float:left;color:@GetColor_for_PricesCount(S5Prices);">Pricing info</div></td>
            }
            <td>
                @if (GetActiveS5Prices() == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <table class="table">
                        <thead>
                            <tr>
                                @for(int i = 0; i < 15; i++)
                                {
                                    <th style="text-align:right;">Price-@i</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                @for(int i = 0; i < 15; i++)
                                {
                                    <td style="text-align:right;">
                                    @if(S5Prices.Prices == null)
                                    {
                                    <div style="float: right;color:red;" align="right" title="Prices Missing">Prices Missing</div>
                                    }
                                    else
                                    {
                                                
                                        @if(S5Prices.Prices.Where(x => x.Level == i).FirstOrDefault() == null)
                                        {
                                        <div style="float: right;color:red;" align="right" title="Sched-@i missing">@(Decimal.Round((S5Prices.Prices.Where(x => x.Level == i).FirstOrDefault() ?? new S5PricePair()).Price, 2))</div>
                                        }
                                        else
                                        {
                                        <div style="float: right;" align="right" title="Sched-i">@(Decimal.Round((S5Prices.Prices.Where(x => x.Level == i).FirstOrDefault() ?? new S5PricePair()).Price, 2))</div>
                                        }
                                    }
                                    </td>
                                }

                            </tr>
                        </tbody>
                    </table>
                }
            </td>
        </tr>
        <tr>
            <td>Quantity info</td>
            <td>
                @if (GetActiveS5Quantities() == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <table class="table">
                        <thead>
                            <tr>
                                @for(short i = 0; i < 5; i++)
                                {
                                    <th style="text-align:right;">Location-@i</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                @for(short i = 0; i < 5; i++)
                                {
                                    <td style="text-align:right;">
                                        @if(S5Quantities.Quantities == null)
                                        {
                                            <div style="float: right;color:red;" align="right" title="Quantities Missing">Quantities Missing</div>
                                        }
                                        else
                                        {
                                            @if(S5Quantities.Quantities.Where(x => x.Location == i).FirstOrDefault() == null)
                                            {
                                            <div style="float: right;color:red;" align="right" title="Location-@i missing">@(Decimal.Round((S5Quantities.Quantities.Where(x => x.Location == i).FirstOrDefault() ?? new S5QtyPair(i,0)).Qty, 2))</div>
                                            }
                                            else
                                            {
                                            <div style="float: right;" align="right" title="Location-@i">@(Decimal.Round((S5Quantities.Quantities.Where(x => x.Location == i).FirstOrDefault() ?? new S5QtyPair(i,0)).Qty, 2))</div>
                                            }
                                        }

                                    </td>
                                }

                            </tr>
                        </tbody>
                    </table>
                }
            </td>
        </tr>
    </tbody>
</table>
}

<h2>Shopify Part Info:</h2>
@if(GetActiveShopifyProduct() == null)
{
<table class="table">
    <thead>
        <td>Fields</td>
        <td>Values</td>
    </thead>
    <tbody>
        <tr>
            <td>InvUnique</td>
            <td>Record Not Found</td>
        </tr>
        <tr>
            <td>Cat</td>
            <td>Record Not Found</td>
        </tr>
        <tr>
            <td>PartNumber</td>
            <td>Record Not Found</td>
        </tr>
        <tr>
            <td>Description</td>
            <td>Record Not Found</td>
        </tr>
        <tr>
            <td>WebCategory</td>
            <td>Record Not Found</td>
        </tr>
        <tr>
            <td>Pricing Info</td>
            <td>Record Not Found</td>
        </tr>
    </tbody>
</table>
}
else
{
<table class="table">
    <thead>
        <td>Fields</td>
        <td>Values</td>
    </thead>
    <tbody>
        <tr>
            <td>InvUnique</td>
            <td>@ShopifyProduct.InvUnique</td>
        </tr>
        <tr>
            <td>Cat</td>
            <td>@ShopifyProduct.Cat</td>
        </tr>
        <tr>
            <td>PartNumber</td>
            <td>@ShopifyProduct.PartNumber</td>
        </tr>
        <tr>
            <td>Description</td>
            <td>@ShopifyProduct.Description</td>
        </tr>
        <tr>
            <td>WebCategory</td>
            <td>@ShopifyProduct.WebCategory</td>
        </tr>
        <tr>
            @if (GetActiveShopifyPrices() == null)
            {
                <td>Pricing info</td>
            }
            else
            {
                <td><div title="@ShopifyPrices.Prices.Count() records found" style="float:left;color:@GetColor_for_PricesCount(ShopifyPrices);">Pricing info</div></td>
            }
            <td>
                @if (GetActiveShopifyPrices() == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <table class="table">
                        <thead>
                            <tr>
                                @for(int i = 0; i < 15; i++)
                                {
                                    <th style="text-align:right;">Price-@i</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                @for(int i = 0; i < 15; i++)
                                {
                                    <td style="text-align:right;">
                                        @if(ShopifyPrices.Prices == null)
                                            {
                                                <div style="float: right;color:red;" align="right" title="Prices Missing">Prices Missing</div>
                                            }
                                            else
                                            {
                                                @if(ShopifyPrices.Prices.Where(x => x.Level == i).FirstOrDefault() == null)
                                                {
                                                <div style="float: right;color:red;" align="right" title="Sched-@i missing">@(Decimal.Round((ShopifyPrices.Prices.Where(x => x.Level == i).FirstOrDefault() ?? new S5PricePair()).Price, 2))</div>
                                                }
                                                else
                                                {
                                                <div style="float: right;" align="right" title="Sched-i">@(Decimal.Round((ShopifyPrices.Prices.Where(x => x.Level == i).FirstOrDefault() ?? new S5PricePair()).Price, 2))</div>
                                                }
                                            }
                                    </td>
                                }

                            </tr>
                        </tbody>
                    </table>
                }
            </td>
        </tr>
        <tr>
            <td>Quantity info</td>
            <td>
                @if (GetActiveShopifyQuantities() == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <table class="table">
                        <thead>
                            <tr>
                                @for(short i = 0; i < 5; i++)
                                {
                                    <th style="text-align:right;">Location-@i</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                @for(short i = 0; i < 5; i++)
                                {
                                    <td style="text-align:right;">
                                        @if(ShopifyQuantities.Quantities == null)
                                            {
                                                <div style="float: right;color:red;" align="right" title="Quantities Missing">Quantities Missing</div>
                                            }
                                            else
                                            {
                                                @if(ShopifyQuantities.Quantities.Where(x => x.Location == i).FirstOrDefault() == null)
                                                {
                                                <div style="float: right;color:red;" align="right" title="Location-@i missing">@(Decimal.Round((ShopifyQuantities.Quantities.Where(x => x.Location == i).FirstOrDefault() ?? new S5QtyPair(i,0)).Qty, 2))</div>
                                                }
                                                else
                                                {
                                                <div style="float: right;" align="right" title="Location-@i">@(Decimal.Round((ShopifyQuantities.Quantities.Where(x => x.Location == i).FirstOrDefault() ?? new S5QtyPair(i,0)).Qty, 2))</div>
                                                }
                                            }
                                    </td>
                                }

                            </tr>
                        </tbody>
                    </table>
                }
            </td>
        </tr>
    </tbody>
</table>
}

<h2>Detailed Differences</h2>

@if(GetDetailedDifferences() == null)
{
    <table>
        <thead>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </thead>
        <tbody>
            <tr>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
        </tbody>
    </table>
}
else
{
        <table>
        <thead>
            <td>InvUnique</td>
            <td>Cat</td>
            <td>PartNumber</td>
            <td>FieldName</td>
            <td>ExternalValueBeforeUpdate</td>
            <td>S5ValueToSendToExternal</td>
        </thead>
        <tbody>
            @foreach(var record in DetailedDifferences_SinglePart)
            {
            <tr>
                <td>@record.InvUnique</td>
                <td>@record.Cat</td>
                <td>@record.PartNumber</td>
                <td>@record.FieldName</td>
                <td>@record.ExternalValueBeforeUpdate</td>
                <td>@record.S5ValueToSendToExternal</td>

            </tr>
            }
        </tbody>
    </table>
}

@code {
    private Shopify_Product[]? products_S5;
    private Shopify_Prices[]? prices_S5;
    private Shopify_Quantities[]? quantities_S5;

    private Shopify_Product[]? products_Shopify;
    private Shopify_Prices[]? prices_Shopify;
    private Shopify_Quantities[]? quantities_Shopify;

    private string invUnique;
    private Shopify_Product S5Product;
    private Shopify_Product ShopifyProduct;
    private Shopify_Prices S5Prices;
    private Shopify_Prices ShopifyPrices;
    private Shopify_Quantities S5Quantities;
    private Shopify_Quantities ShopifyQuantities;

    private IEnumerable<Changes_View> DetailedDifferences_Product;
    private IEnumerable<Changes_View> DetailedDifferences_Prices;
    private IEnumerable<Changes_View> DetailedDifferences_Quantities;
    private IEnumerable<Changes_View> DetailedDifferences_SinglePart;
    //private ILogger logger;

    private string PartAction;
    IEnumerable<Shopify_Product> prodsS5;
    IEnumerable<Shopify_Product> prodsShopify;
    IEnumerable<Shopify_Prices> pricesS5;
    IEnumerable<Shopify_Prices> pricesShopify;
    IEnumerable<Shopify_Quantities> quantitiesS5;
    IEnumerable<Shopify_Quantities> quantitiesShopify;

    private string strS5Json;
    private string strShopifyJson;
    
    public string GetColor_for_PricesCount(IShopify_Prices record)
    {
        if(record.Prices.Count() > 15)
        { return "Red"; }
        else
        { return "Black"; }
    }
    protected override async Task OnInitializedAsync()
    {
        PartAction = "Unknown";
        invUnique = string.Empty;
        strS5Json = "{}";
        strShopifyJson = "{}";

        string strDocument = string.Empty; 
        Document doc = new Document();

        // ----- WARNING: data has to be put into table for each document and http calls adjusted. -----
        // products
        strDocument = await Http.GetStringAsync("http://localhost:7071/api/JsonDocument/74e5b8d9-f264-4029-af3a-f2c44c906511");
        doc = (Document)System.Text.Json.JsonSerializer.Deserialize(strDocument, typeof(Document));
        products_S5 = (Shopify_Product[])System.Text.Json.JsonSerializer.Deserialize(doc.DocumentValue, typeof(Shopify_Product[]));

        strDocument = await Http.GetStringAsync("http://localhost:7071/api/JsonDocument/17cf9358-b783-46a2-97ee-ef69388f3904");
        doc = (Document)System.Text.Json.JsonSerializer.Deserialize(strDocument, typeof(Document));
        products_Shopify = (Shopify_Product[])System.Text.Json.JsonSerializer.Deserialize(doc.DocumentValue, typeof(Shopify_Product[]));

        // prices
        strDocument = await Http.GetStringAsync("http://localhost:7071/api/JsonDocument/7fb824a1-6b6a-46eb-bb0c-e4a315ccb6ec");
        doc = (Document)System.Text.Json.JsonSerializer.Deserialize(strDocument, typeof(Document));
        prices_S5 = (Shopify_Prices[])System.Text.Json.JsonSerializer.Deserialize(doc.DocumentValue, typeof(Shopify_Prices[]));

        strDocument = await Http.GetStringAsync("http://localhost:7071/api/JsonDocument/b9ae61e7-4248-4c95-832d-acbb079a68df");
        doc = (Document)System.Text.Json.JsonSerializer.Deserialize(strDocument, typeof(Document));
        prices_Shopify = (Shopify_Prices[])System.Text.Json.JsonSerializer.Deserialize(doc.DocumentValue, typeof(Shopify_Prices[]));

        // quantities
        strDocument = await Http.GetStringAsync("http://localhost:7071/api/JsonDocument/c0aff18b-a32a-4b0b-bcc7-5808ddace171");
        doc = (Document)System.Text.Json.JsonSerializer.Deserialize(strDocument, typeof(Document));
        quantities_S5 = (Shopify_Quantities[])System.Text.Json.JsonSerializer.Deserialize(doc.DocumentValue, typeof(Shopify_Quantities[]));

        strDocument = await Http.GetStringAsync("http://localhost:7071/api/JsonDocument/c1f7d63e-1f1a-42cd-8c00-254f3b77354d");
        doc = (Document)System.Text.Json.JsonSerializer.Deserialize(strDocument, typeof(Document));
        quantities_Shopify = (Shopify_Quantities[])System.Text.Json.JsonSerializer.Deserialize(doc.DocumentValue, typeof(Shopify_Quantities[]));

        DetailedDifferences_Product = new List<Changes_View>();
        DetailedDifferences_Prices = new List<Changes_View>();
        DetailedDifferences_Quantities = new List<Changes_View>();
        DetailedDifferences_SinglePart = new List<Changes_View>();
    }
    internal async void OnPartSelected()
    {
        int InvUnique = 0;
        int.TryParse(invUnique, out InvUnique);
        if(InvUnique <= 0)
        {
            return;
        }
        Func<IShopify_Identity, int> fIndex = (x) => x.InvUnique;
        Func<Shopify_Product, bool> fIsEcomm = (x) => true;
        VennMap<Shopify_Product, Shopify_Product, int> vennMap_Product = new VennMap<Shopify_Product, Shopify_Product, int>(prodsShopify, prodsS5, fIndex, fIndex, fIsEcomm);

        //string result = cmArt.Reece.ShopifyConnector.ReeceShopify.Products_Edit(vennMap_Product.Both_Ecomm.Select(x => x.Item1));
        List<Shopify_Product> prods = new List<Shopify_Product>(vennMap_Product.Both_Ecomm.Select(x => x.Item1));
        string strEditProducts = JsonSerializer.Serialize(prods, typeof(List<Shopify_Product>));
        string tmpResults = await MakeApiPostCallLocal("/product/edit/", strEditProducts);

        PartAction = tmpResults;
    }
    internal Shopify_Product GetActiveS5Product()
    {
        if(products_S5 == null)
        {
            return null;
        }
        int _invUnique;
        int.TryParse(invUnique, out _invUnique);
        S5Product = products_S5.Where(x => x.InvUnique == _invUnique).FirstOrDefault();
        return S5Product;
    }
    internal Shopify_Product GetActiveShopifyProduct()
    {
        if(products_Shopify == null)
        {
            return null;
        }
        int _invUnique;
        int.TryParse(invUnique, out _invUnique);
        ShopifyProduct = products_Shopify.Where(x => x.InvUnique == _invUnique).FirstOrDefault();
        return ShopifyProduct;
    }

    internal Shopify_Prices GetActiveS5Prices()
    {
        if(prices_S5 == null)
        {
            return null;
        }
        int _invUnique;
        int.TryParse(invUnique, out _invUnique);
        S5Prices = prices_S5.Where(x => x.InvUnique == _invUnique).FirstOrDefault();
        return S5Prices;
    }
    internal Shopify_Prices GetActiveShopifyPrices()
    {
        if(prices_Shopify == null)
        {
            return null;
        }
        int _invUnique;
        int.TryParse(invUnique, out _invUnique);
        ShopifyPrices = prices_Shopify.Where(x => x.InvUnique == _invUnique).FirstOrDefault();
        return ShopifyPrices;
    }

    internal Shopify_Quantities GetActiveS5Quantities()
    {
        if(quantities_S5 == null)
        {
            return null;
        }
        int _invUnique;
        int.TryParse(invUnique, out _invUnique);
        S5Quantities = quantities_S5.Where(x => x.InvUnique == _invUnique).FirstOrDefault();
        return S5Quantities;
    }
    internal Shopify_Quantities GetActiveShopifyQuantities()
    {
        if(quantities_Shopify == null)
        {
            return null;
        }
        int _invUnique;
        int.TryParse(invUnique, out _invUnique);
        ShopifyQuantities = quantities_Shopify.Where(x => x.InvUnique == _invUnique).FirstOrDefault();
        return ShopifyQuantities;
    }
    internal IEnumerable<Changes_View> GetDetailedDifferences()
    {
        Func<IShopify_Identity, int> fIndex = (x) => x.InvUnique;
        if(products_S5 == null && products_Shopify == null && prices_S5 == null && prices_Shopify == null && quantities_S5 == null && quantities_Shopify == null)
        {
            DetailedDifferences_SinglePart = new List<Changes_View>();
            return new List<Changes_View>(); ;
        }
        prodsS5 = products_S5.Where(x => x.InvUnique.ToString() == invUnique);
        prodsShopify = products_Shopify.Where(x => x.InvUnique.ToString() == invUnique);
        pricesS5 = prices_S5.Where(x => x.InvUnique.ToString() == invUnique);
        pricesShopify = prices_Shopify.Where(x => x.InvUnique.ToString() == invUnique);
        quantitiesS5 = quantities_S5.Where(x => x.InvUnique.ToString() == invUnique);
        quantitiesShopify = quantities_Shopify.Where(x => x.InvUnique.ToString() == invUnique);

        GenericAnalysis<Shopify_Product, IShopify_Product, int> Analyze_Product = new GenericAnalysis<Shopify_Product, IShopify_Product, int>();
        Analyze_Product.init(prodsS5, prodsShopify, null);
        DetailedDifferences_Product = Analyze_Product.GetDetailedDifferences(IShopify_ProductExtensions.Equals, fIndex);

        GenericAnalysis<Shopify_Prices, IShopify_Prices, int> Analyze_Prices= new GenericAnalysis<Shopify_Prices, IShopify_Prices, int>();
        Analyze_Prices.init(pricesS5, pricesShopify, null);
        DetailedDifferences_Prices = Analyze_Prices.GetDetailedDifferences(IShopify_PricesExtensions.Equals, fIndex);

        GenericAnalysis<Shopify_Quantities, IShopify_Quantities, int> Analyze_Quantities= new GenericAnalysis<Shopify_Quantities, IShopify_Quantities, int>();
        Analyze_Quantities.init(quantitiesS5, quantitiesShopify, null);
        DetailedDifferences_Quantities = Analyze_Quantities.GetDetailedDifferences(IShopify_QuantitiesExtensions.Equals, fIndex);

        List<Changes_View> DetailedDifferences_All = new List<Changes_View>();
        foreach(var record in DetailedDifferences_Product) { DetailedDifferences_All.Add(record); }
        foreach(var record in DetailedDifferences_Prices) { DetailedDifferences_All.Add(record); }
        foreach(var record in DetailedDifferences_Quantities) { DetailedDifferences_All.Add(record); }

        DetailedDifferences_SinglePart = DetailedDifferences_All.Where(x => x.InvUnique.ToString() == invUnique);

        return DetailedDifferences_SinglePart;
    }
    internal IEnumerable<Changes_View> GetAllDetailedDifferences()
    {
        Func<IShopify_Identity, int> fIndex = (x) => x.InvUnique;

        GenericAnalysis<Shopify_Product, IShopify_Product, int> Analyze_Product = new GenericAnalysis<Shopify_Product, IShopify_Product, int>();
        Analyze_Product.init(products_S5, products_Shopify, null);
        DetailedDifferences_Product = Analyze_Product.GetDetailedDifferences(IShopify_ProductExtensions.Equals, fIndex);

        GenericAnalysis<Shopify_Prices, IShopify_Prices, int> Analyze_Prices= new GenericAnalysis<Shopify_Prices, IShopify_Prices, int>();
        Analyze_Prices.init(prices_S5, prices_Shopify, null);
        DetailedDifferences_Prices = Analyze_Prices.GetDetailedDifferences(IShopify_PricesExtensions.Equals, fIndex);

        GenericAnalysis<Shopify_Quantities, IShopify_Quantities, int> Analyze_Quantities= new GenericAnalysis<Shopify_Quantities, IShopify_Quantities, int>();
        Analyze_Quantities.init(quantities_S5, quantities_Shopify, null);
        DetailedDifferences_Quantities = Analyze_Quantities.GetDetailedDifferences(IShopify_QuantitiesExtensions.Equals, fIndex);

        List<Changes_View> DetailedDifferences_All = new List<Changes_View>();
        foreach(var record in DetailedDifferences_Product) { DetailedDifferences_All.Add(record); }
        foreach(var record in DetailedDifferences_Prices) { DetailedDifferences_All.Add(record); }
        foreach(var record in DetailedDifferences_Quantities) { DetailedDifferences_All.Add(record); }

        DetailedDifferences_SinglePart = DetailedDifferences_All.Where(x => x.InvUnique.ToString() == invUnique);

        return DetailedDifferences_SinglePart;
    }
    private async Task<string> MakeApiPostCallLocal(string urlCommand, string content)
    {
        //LogApiCalls("urlCommand(Post): " + urlCommand);
        //LogApiCalls("content: " + content);

        const string BaseUrl = "https://aquadragonservices.com/pcr/apitest/index.php";

        HttpClient client = new HttpClient();
        client.Timeout = TimeSpan.FromMinutes(10);

        Uri baseUri = new Uri(BaseUrl + urlCommand);
        client.BaseAddress = baseUri;
        client.DefaultRequestHeaders.Clear();
        client.DefaultRequestHeaders.ConnectionClose = true;

        string clientId = "shopravi";
        string clientSecret = "H9pPG9yW58cMP45e";

        // Async Call
        var authenticationString = $"{clientId}:{clientSecret}";
        var base64EncodedAuthenticationString = Convert.ToBase64String(System.Text.ASCIIEncoding.ASCII.GetBytes(authenticationString));

        HttpRequestMessage requestMessage = new HttpRequestMessage(HttpMethod.Post, baseUri);
        requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Basic", base64EncodedAuthenticationString);
        //requestMessage.Content = new StringContent(content);
        requestMessage.Content = new StringContent(content, encoding: System.Text.Encoding.ASCII, "application/json" );

        //make the request
        //var task = client.SendAsync(requestMessage);
        //var response = task.Result;
        var response = await client.SendAsync(requestMessage);

        response.EnsureSuccessStatusCode();
        string responseBody = await response.Content.ReadAsStringAsync();

        //LogApiCalls("responseBody: " + responseBody);
        //Task<string> result = new Task<string>(() => responseBody);
        return responseBody;
    }

    
}
