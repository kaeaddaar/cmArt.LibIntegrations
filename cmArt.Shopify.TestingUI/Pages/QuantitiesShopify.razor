@page "/QuantitiesShopify"
@inject HttpClient Http
@using cmArt.Reece.ShopifyConnector
@using cmArt.Portal.Data

<PageTitle>Shopify Quantities</PageTitle>

<h1>Quantity Data - Shopify</h1>

<button @onclick="Perform_Quantities_Sync">Quantity Sync</button>
<button @onclick="Perform_Quantities_List">Quantity List</button>
<cmArt.Shopify.TestingUI.Components.QuantitiesStats data="quantities"></cmArt.Shopify.TestingUI.Components.QuantitiesStats>

<div>Part Filter: <input @onchange="OnChangePartNumberFilter" /></div>
<br />
<h3>Message</h3>
<p>@msg</p>

<cmArt.Shopify.TestingUI.Components.QuantitiesView records="quantities"/>

<h3>Results</h3>
<p>@strResults</p>

@code {
    private string strResults;
    private string msg;

    private IEnumerable<IShopify_Quantities> quantities;
    private IEnumerable<IShopify_Quantities> quantities_orig;

    private void OnChangePartNumberFilter(ChangeEventArgs e)
    {
        if (quantities_orig == null)
        {
            quantities_orig = quantities;
        }
        string value = e.Value.ToString() ?? string.Empty;
        IEnumerable<IShopify_Quantities> _products = quantities ?? new List<IShopify_Quantities>();

        if (value != string.Empty)
        {
            if(_products.Count() > 0)
            {
                quantities = quantities_orig.Where(x => x.PartNumber.ToUpper().Contains(value.ToUpper()));
            }
        }
        else
        {
            quantities = quantities_orig ?? new List<IShopify_Quantities>();
        }
    }
    protected override async Task OnInitializedAsync()
    {        
        string strDocument = string.Empty; 
        Document doc = new Document();
        strDocument = await Http.GetStringAsync("http://localhost:7071/api/JsonDocument/c1f7d63e-1f1a-42cd-8c00-254f3b77354d");
        doc = (Document)System.Text.Json.JsonSerializer.Deserialize(strDocument, typeof(Document));
        quantities = (IEnumerable<Shopify_Quantities>)System.Text.Json.JsonSerializer.Deserialize(doc.documentValue, typeof(IEnumerable<Shopify_Quantities>));
        //records = await Http.GetFromJsonAsync<Shopify_Quantities[]>("sample-data/tblShopifyQuantities_ReecesAPI_page1.json");
    }
    private async void Perform_Quantities_Sync()
    {
        msg = "Begin Perform_Quantities_Sync";
        strResults = await ReeceShopifyAzFunc.Inventory_Sync();
        msg = "Finished Perform_Quantities_Sync";
        strResults = strResults ?? string.Empty;
        StateHasChanged();
    }
    private async void Perform_Quantities_List()
    {
        msg = "Begin Perform_Quantities_List";
        IEnumerable<tmpShopify_Quantities> tmpQuantities = await ReeceShopifyAzFunc.GetAlltmpShopify_Quantities();
        tmpQuantities = tmpQuantities ?? new List<tmpShopify_Quantities>();
        quantities = tmpQuantities.Select(x => x.AsShopify_Quantities());
        strResults = System.Text.Json.JsonSerializer.Serialize(quantities, typeof(IEnumerable<IShopify_Quantities>));
        msg = "Finished GetAlltmpShopify_Quantities";
        strResults = strResults ?? string.Empty;
        StateHasChanged();
    }

}
