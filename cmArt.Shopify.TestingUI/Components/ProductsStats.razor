@using cmArt.Reece.ShopifyConnector
<h3>Products Statistics</h3>
<table>
    <thead>
        <tr>
            <td>Statistic</td>
            <td>Value</td>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Record Count</td>
            <td>@data.Count()</td>
        </tr>
        <tr>
            <td>Duplicates by Part Number</td>
            <td>@GetNumberOfDuplicatesByPartNumber()</td>
        </tr>
        <tr>
            <td># of Default Parts</td>
            <td>@GetNumberOfDefaultParts()</td>
        </tr>
        @foreach(var webcat in distinctWebCats)
        {
            <tr>
                <td># of WebCat "@webcat"</td>
                <td>@GetNumberOfWebCategories(webcat)</td>
            </tr>
        }
        <tr>
            <td></td>
            <td></td>
        </tr>
    </tbody>
</table>
@code {
    private IEnumerable<IShopify_Product> _data;
    private IEnumerable<string> distinctWebCats 
    {
        get { return data.Select(x => x.WebCategory).DistinctBy(x => x); }
    }

    [Parameter]
    public IEnumerable<IShopify_Product> data 
    { 
        get
        {
            return _data ?? new List<IShopify_Product>();
        }
        set
        {
            _data = value ?? _data ?? new List<IShopify_Product>();
        } 
    }

    private int GetNumberOfDuplicatesByPartNumber()
    {
        var Duplicates_Products = data.GroupBy(x => x.PartNumber).Where(x => x.Count() > 1).Select(x => x.Key);
        //var Duplicates_Prices = API_Prices.GroupBy(x => x.PartNumber).Where(x => x.Count() > 1).Select(x => x.Key);
        //var Duplicates_Quantities = API_Quantities.GroupBy(x => x.PartNumber).Where(x => x.Count() > 1).Select(x => x.Key);
        return Duplicates_Products.Count();
    }
    private int GetNumberOfDefaultParts()
    {
        var DefaultParts = data.Where(x => x.PartNumber.Trim().ToUpper() == "DEFAULT");
        return DefaultParts.Count();
    }
    private int GetNumberOfWebCategories(string WebCategoryToCount)
    {
        var grouped = data.Where(x => x.WebCategory.Trim().ToUpper() == WebCategoryToCount.ToUpper());
        return grouped.Count();
    }
}
