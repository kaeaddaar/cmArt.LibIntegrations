@using cmArt.Reece.ShopifyConnector
<h3>Discounts Statistics</h3>
<table>
    <thead>
        <tr>
            <td>Statistic</td>
            <td>Value</td>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Record Count</td>
            <td>@data.Count()</td>
        </tr>
        <tr>
            <td>Duplicates by Part Number</td>
            <td>@GetNumberOfDuplicatesByPartNumber()</td>
        </tr>
        <tr>
            <td># of Default Parts</td>
            <td>@GetNumberOfDefaultParts()</td>
        </tr>
        <tr>
            <td># of Empty Price Lists</td>
            <td>@GetNumberOfEmptyPriceLists()</td>
        </tr>
        <tr>
            <td># missing individual prices</td>
            <td>@GetNumberOfMissingIndividualPrices()</td>
        </tr>
        <tr>
            <td>Count of Distinct Price Schedules</td>
            <td>@CountDistinct</td>
        </tr>
        <tr>
            <td>Distinct Price Schedules</td>
            <td>
            @foreach(var sched in distinctPriceSchedules)
            {
                @(sched + ",");
            }
            </td>
        </tr>
        <tr>
            <td># $0 prices</td>
            <td>@GetNumberOfZeroDollarPrices()</td>
        </tr>
        <tr>
            <td># $100,000 prices</td>
            <td>@GetNumberOfOneHundredThousandDollarPrices()</td>
        </tr>
        <tr>
            <td>Get Number of InvUnique 0 Records</td>
            <td>@GetNumberOfInvUnique0Records()</td>
        </tr>
        <tr>
            <td></td>
            <td></td>
        </tr>
    </tbody>
</table>
@code {
    private IEnumerable<IShopify_Prices> _data;
    private int CountDistinct;
    private IEnumerable<short> distinctPriceSchedules;

    [Parameter]
    public IEnumerable<IShopify_Prices> data 
    { 
        get
        {
            return _data ?? new List<IShopify_Prices>();
        }
        set
        {
            _data = value ?? _data ?? new List<IShopify_Prices>();
        } 
    }

    private int GetNumberOfDuplicatesByPartNumber()
    {
        var Duplicates_Products = data.GroupBy(x => x.PartNumber).Where(x => x.Count() > 1).Select(x => x.Key);
        //var Duplicates_Prices = API_Prices.GroupBy(x => x.PartNumber).Where(x => x.Count() > 1).Select(x => x.Key);
        //var Duplicates_Quantities = API_Quantities.GroupBy(x => x.PartNumber).Where(x => x.Count() > 1).Select(x => x.Key);
        return Duplicates_Products.Count();
    }
    private int GetNumberOfDefaultParts()
    {
        var DefaultParts = data.Where(x => x.PartNumber.Trim().ToUpper() == "DEFAULT");
        return DefaultParts.Count();
    }
    private int GetNumberOfEmptyPriceLists()
    {
        var empty = data.Where(x => x.Prices.Count() == 0);
        return empty.Count();
    }
    private int GetNumberOfMissingIndividualPrices()
    {
        var prices = data.Select(x => x.Prices);
        distinctPriceSchedules = prices.SelectMany(x => x).Select(x => x.Level).DistinctBy(x => x).OrderBy(x => x);
        CountDistinct = distinctPriceSchedules.Count();

        var MissingCounts = prices.Select(x => 15 - Math.Min(x.Count(),15));
        var total = MissingCounts.Sum(x => x);
        return total;
    }
    private int GetNumberOfZeroDollarPrices()
    {
        var prices = data.Select(x => x.Prices);
        var ZeroPrices = prices.SelectMany(x => x).Select(x => x.Price).Where(x => decimal.Round(x, 2) == (decimal)0.00);

        return ZeroPrices.Count();
    }
    private int GetNumberOfOneHundredThousandDollarPrices()
    {
        var prices = data.Select(x => x.Prices);
        var ZeroPrices = prices.SelectMany(x => x).Select(x => x.Price).Where(x => decimal.Round(x, 2) == (decimal)100000.00);

        return ZeroPrices.Count();
    }
    private int GetNumberOfInvUnique0Records()
    {
        int count = data.Where(x => x.InvUnique == 0).Count();
        return count;
    }
}
